/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT maxEntryLength 20
#define_constant nMaxEntries 60
//#define_constant nMaxEntriesPerPage 6

// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 
_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,
shiftPress,capsLockPress,clearPress,bckspPress,
_skip_,
pageUp,pageDown,FirstPage,LastPage,
_skip_,
save,cancel,
_skip_,
entrySelect[10],kboardArray[42];


// ANALOG_INPUT 
STRING_INPUT presetNumStrIn$[maxEntryLength]; 

// BUFFER_INPUT 

DIGITAL_OUTPUT
_skip_,_skip_,_skip_,_skip_,_skip_,_skip_, 
capsLockFb,shiftFb,
kpPageFb;

ANALOG_OUTPUT 
modeFb;

STRING_OUTPUT 
kbStrOut$,selectedNumStr$,presetNumStrOut$[nMaxEntries];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER maxEntryLen,holdTime,entriesPerPage,maxEntries;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
string_parameter File_Name[30];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES holdTime   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
propDefaultUnit = unitDecimal; //, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
propBounds = 2d , 5d;
propDefaultValue = 3d;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES maxEntryLen   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
propDefaultUnit = unitDecimal; //, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
propBounds = 20d , 50d;
propDefaultValue = 25d;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES entriesPerPage   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
propDefaultUnit = unitDecimal; //, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
propBounds = 6d , 12d;
propDefaultValue = 6d;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES maxEntries   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
propDefaultUnit = unitDecimal; //, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
propBounds = 20d , 60d;
propDefaultValue = 60d;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES



/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
STRUCTURE structAddressBook
{
	string cName[20];
	string cNumber[20];
};

structAddressBook addressBook[nMaxEntries];
 



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER
vMaxEntries,vEntriesPerPage,vMaxEntryLen,
varPage,varIndex,varEntryIndex,editMode,
vCapsLock,vShift,vShiftLock,shiftHold;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING
fileName[50],tempKbStr$[30];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function displayAddressBook()
{ 
    integer i,idx;
     

	for(i=1 to vEntriesPerPage)
	{
        idx = i + varIndex; 		
    	presetNumStrOut$[i] = addressBook[idx].cName; 
        trace("i display= %d\n",i); 	
	} 
}

Function displaySelectedNumber()
{ 		
    	selectedNumStr$ = addressBook[varEntryIndex].cNumber;  	
}

function storeAddressBook()
{
	signed_integer handle,error;
    integer i;
    
    startFileOPerations();
   	handle = fileOpen(fileName,_O_RDWR|_O_CREAT);

	for(i = 1 to vMaxEntries)
	{
		writeStructure(handle,addressBook[i]);
		trace("i write = %d\n",i);
	}
		
    fileClose(handle);
    endFileOperations();
}

function recallAddressBook()
{
	signed_integer handle,error;
    integer i;
    
	startfileoperations();
	handle = fileOpen(fileName,_O_RDONLY);

	for(i = 1 to vMaxEntries)
	{
		readStructure(handle,addressBook[i]);
	}

    fileClose(handle);
	endFileOperations();
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
push FirstPage
{
	varPage = 1;
    varIndex = 0;
    displayAddressBook();		
}

push lastPage
{
	varPage = vMaxEntries/vEntriesPerPage;
    varIndex = (varPage * vEntriesPerPage)- vEntriesPerPage ;
	displayAddressBook();
 }

push pageDown
{
    if(varIndex < (vMaxEntries - vEntriesPerPage))
	{
        varPage = varPage + 1;
		varIndex = (varPage * vEntriesPerPage)- vEntriesPerPage;
		displayAddressBook();
    }

}

push pageUp
{
    if(varIndex >= vEntriesPerPage)
	{
        varPage = varPage - 1;
		varIndex = (varPage * vEntriesPerPage)- vEntriesPerPage;
        displayAddressBook();
	}

}

push entrySelect
{
	integer i;
    
	i = GetLastModifiedArrayIndex();
    varEntryIndex = varIndex + i;

    wait(holdTime * 100,entrySelWait)
	{
		editMode = on; 
		kpPageFb = editMode;  	
	}
}

release entrySelect
{
	cancelWait(entrySelWait);
    if(!editMode)
	{		
		selectedNumStr$ = addressBook[varEntryIndex].cNumber;
	} 	 	
}


push save
{
	
	addressBook[varEntryIndex].cName = tempKbStr$;
	addressBook[varEntryIndex].cNumber = presetNumStrIn$;
    storeAddressBook();
	displayAddressBook();

	editMode = off;
	kpPageFb = editMode;
}

push cancel
{
	editMode = off;
	kpPageFb = editMode;	
}


PUSH capsLockPress
{
    vCapsLock = !vCapsLock;
    if(!vCapsLock)
	{
		vShift = off;
    }
    else
		vShift = on;

    modeFb = vShift;    
	CapsLockFb = vCapsLock;
    shiftFb = off;		
}

PUSH shiftPress
{
    wait(300,shiftHoldWait)
		{
		vShiftLock = on;
		vShift = vShiftLock;
        shiftFb = vShift;
        modeFb = vShift;
        shiftHold = on;
		}
   		
}

release shiftPress
{
    cancelWait(shiftHoldWait);
    if(!shiftHold)
	
	{
		if(vCapsLock)
		{
	        vCapsLock = off;
	        vShift = off;
		}
		else if(vShiftLock)
		{
			vShiftLock = off;
            vShift = vShiftLock;
		}
		else			
		{
	       vShift = !vshift;
		}
	    
		shiftFb = vShift;
        modeFb = vShift;
		CapsLockFb = vCapsLock;
	}
    shiftHold = off;


}

push clearPress
{
	tempKbStr$ = "";
	kbStrOut$ = tempKbStr$;	
}

push bckspPress
{
    if(len(tempKbStr$))
		tempKbStr$ = left(tempKbStr$,len(tempKbStr$) - 1);
	kbStrOut$ = tempKbStr$;

}


push kboardArray
{
    integer i;
	i = GetLastModifiedArrayIndex();

	switch(i)
	{
		case(1):
		{
			if(vShift)
				tempKbStr$ = tempKbStr$ + "A";
			else
				tempKbStr$ = tempKbStr$ + "a";
		}
		case(2):
		{
			if(vShift)
				tempKbStr$ = tempKbStr$ + "B";
			else
				tempKbStr$ = tempKbStr$ + "b";
		}
		case(3):
		{
			if(vShift)
				tempKbStr$ = tempKbStr$ + "C";
			else
				tempKbStr$ = tempKbStr$ + "c";
		}

	}
    if(!vShiftLock && !vCapsLock)
	{
    	vShift = off;
    	shiftFb = vShift;
		modeFb = vShift;
	}
    kbStrOut$ = tempKbStr$;
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

     WaitForInitializationComplete();

     varPage = 1;
     varIndex = 0;

     filename = "\\NVRAM\\" + file_name + ".txt";
     recallAddressBook();
     displayAddressBook();
      
     vMaxEntryLen = maxEntryLen;
     vEntriesPerPage = entriesPerPage;
     vMaxEntries = maxEntries;

	 
  }


