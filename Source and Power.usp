/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Sam Kennedy
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT   PresentationMode 1
#DEFINE_CONSTANT   vtcMode  2
#DEFINE_CONSTANT   atcMode  3

#DEFINE_CONSTANT   clear    10 // for function clearing
#DEFINE_CONSTANT   pulseTime 100 // 1/10 sec for updates to simpl   

// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 
powerOn_press,
powerOff_press,
_skip_,
displayFbFromDevice,

_skip_,
presentationClearpress,
presentationMode_Press,
vtcMode_press,
atcMode_press,
_skip_,
vtc_stop_pres_press,
_skip_,
presentationPresses[5],
_skip_,

presentationTabPresses[4],
_skip_,
vtcTabPresses[4],
vtcSendSourcePresses[3],
_skip_,
atcTabPresses[3],
_skip_,
displayInpCmds[5,5],
_skip_

;


ANALOG_INPUT 
displayInp_fb,
powerUp_waitTime,
powerDown_waitTime;
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT 
powerOn_fb,
powerOff_fb,
systemPowerOnPulse,
systemPowerOffPulse,
modeClearPulse,
pageActive_pulse,
_skip_,
display_fb,
displayWait_fb,
displayWaitPulse,
displayReadyPulse,
displayPowerOnPulse,
displayPowerOffPulse,
displayInpPulse,
_skip_,
presentation_fb,
presModeClearPulse,
presNoSource_pageFb,
presentationNoSourcePulse,

source1_fb,
source1SelectPulse,
source2_fb,
source2SelectPulse,
source3_fb,
source3SelectPulse,
source4_fb,
source4SelectPulse,

pres_tab1_Fb,
pres_tab2_Fb,
pres_tab3_Fb,
pres_tab4_Fb,
pres_tab1_pageFb,
pres_tab2_pageFb,
pres_tab3_pageFb,
pres_tab4_pageFb,
_skip_,

vtc_fb,
vtcSelectPulse,
vtcClearPulse,
vtc_stop_presentation_pulse,

vtc_Tab1_fb,
vtc_Tab2_fb,
vtc_Tab3_fb,
vtc_Tab4_fb,
vtc_tab1_pageFb,
vtc_tab2_pageFb,
vtc_tab3_pageFb,
vtc_tab4_pageFb,
vtc_send_source1_fb,
vtc_send_source2_fb,
vtc_send_source3_fb,
vtc_stop_pres_pageFb,
vtc_send_source1_pageFb,
vtc_send_source2_pageFb,
vtc_send_source3_pageFb,
_skip_,

atc_fb,
atcSelectPulse,
atcClearPulse,

atc_Tab1_fb,
atc_Tab2_fb,
atc_Tab3_fb,
atc_tab1_pageFb,
atc_tab2_pageFb,
atc_tab3_pageFb,
_skip_;
 
analog_output
whichSource_fb,
whichMode_fb;

string_output
info_string;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER

whichSource,
whichMode,
whichCam,
whichCamPreset,
displayPower,
waitForDisplay,
displayWaitTime,
systemPower;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
 STRING

info_string_var[30];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function funcPowerOn()
{

    pulse (powerUp_WaitTime * 100,systemPowerOnPulse);
	wait(powerUp_WaitTime * 100)
		{
    	systempower = 1;
    	powerOn_fb = 1;
		powerOff_fb = 0;
    	}
    
}

Function funcPowerOff()
{
	pulse (powerDown_WaitTime * 100,systemPowerOffPulse);
    wait(powerDown_WaitTime * 100)
		{
    	systempower = 0;
    	powerOff_fb = 1;
		powerOn_fb = 0;
		}
     
    source1_fb = 0;
	source2_fb = 0;
	source3_fb = 0;
	source4_fb = 0;
	
   	pulse (50,displayPowerOffPulse);
     
	pulse(100,AtcClearPulse);
   	atc_fb = 0;
	atc_tab1_Fb = 0;
	atc_tab2_Fb = 0;
	atc_tab3_Fb = 0;
	atc_tab1_pageFb = 0;
	atc_tab2_pageFb = 0;
	atc_tab3_pageFb = 0;

	
	pulse(pulseTime,vtcClearPulse);
    vtc_fb = 0;
	vtc_tab1_Fb = 0;
	vtc_tab2_Fb = 0;
	vtc_tab3_Fb = 0;
	vtc_tab4_Fb = 0;
	vtc_tab1_pageFb = 0;
	vtc_tab2_pageFb = 0;
	vtc_tab3_pageFb = 0;
	vtc_tab4_pageFb = 0;

	vtc_send_source1_fb = 0;
	vtc_send_source2_fb = 0;
	vtc_send_source3_fb = 0;
	vtc_send_source1_pageFb = 0;
	vtc_send_source2_pageFb = 0;
	vtc_send_source3_pageFb = 0;
	vtc_stop_pres_pageFb = 0;
	
	pulse(pulseTime,presModeClearPulse);
	presentation_fb = 0;
    
	pres_tab1_Fb	 = 0;
	pres_tab2_Fb	 = 0;
	pres_tab3_Fb 	 = 0;
	pres_tab4_Fb	 = 0;
	pres_tab1_pageFb = 0;
	pres_tab2_pageFb = 0;
	pres_tab3_pageFb = 0;
	pres_tab4_pageFb = 0;
	presNoSource_pageFb = 0;


}
  
Function funcDisplayPowerOn()
{
   displayPower = 1;
   pulse (50,displayPowerOnPulse);
}

Function funcDisplayPowerOff()
{
   displayPower = 0;
   pulse (50,displayPowerOffPulse);
}


function funcUpdatePresentationTabs(integer whTab)
{
	wait (1)
		pulse(pulseTime,pageActive_pulse);

    pres_tab1_Fb	 = 0;
	pres_tab2_Fb	 = 0;
	pres_tab3_Fb 	 = 0;
	pres_tab4_Fb	 = 0;
	pres_tab1_pageFb = 0;
	pres_tab2_pageFb = 0;
	pres_tab3_pageFb = 0;
	pres_tab4_pageFb = 0;
    

		
	switch(whTab)
		{
			case (1):
				{
				pres_tab1_Fb = 1;
				pres_tab1_pageFb = 1;
				presNoSource_pageFb = 0;
				}
			case (2):
				{
				pres_tab2_Fb = 1;
				pres_tab2_pageFb = 1;
                presNoSource_pageFb = 0;
				}
			case (3):
				{
				pres_tab3_Fb = 1;
				pres_tab3_pageFb = 1;
                presNoSource_pageFb = 0;
				}
			case (4):
				{
				pres_tab4_Fb = 1;
				pres_tab4_pageFb = 1;
                presNoSource_pageFb = 0;
				}
			default:
				{
 				}
		}
}
 



function funcUpdateVtcSendSources(integer sendSrce)
{
	wait (1)
		 pulse(pulseTime,pageActive_pulse);

	vtc_send_source1_fb = 0;
	vtc_send_source2_fb = 0;
	vtc_send_source3_fb = 0;
	
	vtc_send_source1_pageFb = 0;
	vtc_send_source2_pageFb = 0;
	vtc_send_source3_pageFb = 0;
     
	vtc_stop_pres_pageFb = 0;

	switch(sendSrce)
		{
			case (1):
				{
                 vtc_send_source1_fb = 1;
				 vtc_send_source1_pageFb = 1;
				}
			case (2):
				{
                 vtc_send_source2_fb = 1;
				 vtc_send_source2_pageFb = 1;
				}
			case (3):
				{
                 vtc_send_source3_fb = 1;
				 vtc_send_source3_pageFb = 1;
				}
			case (10):
				{	
				 vtc_stop_pres_pageFb = 1;
				}
		}
}


function funcUpdateVtcTabs(integer whTab)
{	
	wait (1)
		 pulse(pulseTime,pageActive_pulse);

    vtc_tab1_pageFb = 0;
	vtc_tab2_pageFb = 0;
	vtc_tab3_pageFb = 0;
	vtc_tab4_pageFb = 0;
    vtc_tab1_Fb 	= 0;
	vtc_tab2_Fb		= 0;
	vtc_tab3_Fb 	= 0;
	vtc_tab4_Fb 	= 0;

		
	switch(whTab)
		{
			case (1):
				{
				vtc_tab1_Fb = 1;
				vtc_tab1_pageFb = 1;
                call funcUpdateVtcSendSources(0);
				}
			case (2):
				{
				vtc_tab2_Fb = 1;
				vtc_tab2_pageFb = 1;
                call funcUpdateVtcSendSources(0);
				}
			case (3):
				{
				vtc_tab3_Fb = 1;
				vtc_tab3_pageFb = 1;
				call funcUpdateVtcSendSources(0);
				}
			case (4):
				{
				vtc_tab4_Fb = 1;
				vtc_tab4_pageFb = 1;
				vtc_stop_pres_pageFb = 1;
				}
			default:
				{
				}
		}
}


			


function funcUpdateAtcTabs(integer whTab)
{
	wait (1)
       	pulse(pulseTime,pageActive_pulse);
    
    atc_tab1_pageFb = 0;
	atc_tab2_pageFb = 0;
	atc_tab3_pageFb = 0;
    atc_tab1_Fb 	= 0;
	atc_tab2_Fb		= 0;
	atc_tab3_Fb 	= 0;

		
	switch(whTab)
		{
			case (1):
				{
				atc_tab1_Fb = 1;
				atc_tab1_pageFb = 1;

				}
			case (2):
				{
				atc_tab2_Fb = 1;
				atc_tab2_pageFb = 1;

				}
			case (3):
				{
				atc_tab3_Fb = 1;
				atc_tab3_pageFb = 1;
				}
			default:
				{
				}
		}
}
			



Function funcUpdatePresentationSource(integer whSource)
{ 
    wait (1)
		pulse(pulseTime,pageActive_pulse);

    source1_fb = 0;
	source2_fb = 0;
	source3_fb = 0;
	source4_fb = 0;

    presNoSource_pageFb = 0;



    		
    switch(whSource)
		{
		//source1_fb = 0;
        case (1):
			{
			pulse(pulseTime,source1SelectPulse);
			source1_fb = 1;
			call funcUpdatePresentationTabs(0); // set any source to tab1
 			}
		case (2):
			{
			pulse(pulseTime,source2SelectPulse);
			source2_fb = 1;
		    call funcUpdatePresentationTabs(0); // set any source to tab1
			}
		case (3):
			{
			pulse(pulseTime,source3SelectPulse);
			source3_fb = 1;
			call funcUpdatePresentationTabs(0); // set any source to ta
			}
		case (4):
			{
			pulse(pulseTime,source4SelectPulse);
			source4_fb = 1;
			call funcUpdatePresentationTabs(1); // set any source to tab1
			}
		case (10):// clear presentation press
			{
			pulse(pulseTime,presentationNoSourcePulse);
			presNoSource_pageFb = 1;
  			}		
       }  
}


 
Function funcModeUpdate(integer whMode)
{
    wait (1)
		pulse(pulseTime,pageActive_pulse);

	atc_fb = 0;
    vtc_fb = 0;
    presentation_fb = 0;
    
	switch(whMode)
		{
			case (presentationMode):
				{
				 pulse(pulseTime,presentationNoSourcePulse);
				 call funcUpdatePresentationTabs(10);
				 presentation_fb = 1;
				 presNoSource_pageFb = 1;

				 pulse(pulseTime,atcClearPulse);
				 call funcUpdateAtcTabs(0);

				 pulse(pulseTime,vtcClearPulse);
				 call funcUpdateVtcTabs(0);
				 call funcUpdateVtcSendSources(0);
				 
				}
           case (vtcMode):
				{
				 pulse(pulseTime,vtcSelectPulse);
				 call funcUpdateVtcTabs(1);
                 vtc_fb = 1;
				 vtc_tab1_Fb = 1;
				 vtc_tab1_pageFb = 1;

				 pulse(pulseTime,atcClearPulse);
                 call funcUpdateAtcTabs(0);

                 pulse(pulseTime,presModeClearPulse);
                 call funcUpdatePresentationSource(0);
                 call funcUpdatePresentationTabs(0);

				}
           case (atcMode):
				{
                 pulse(pulseTime,atcSelectPulse);
				 call funcUpdateAtcTabs(1);
                 atc_fb = 1;
                 atc_tab1_Fb = 1;
				 atc_tab1_pageFb = 1;

				 pulse(pulseTime,vtcClearPulse);
				 call funcUpdateVtcTabs(0);
                 call funcUpdateVtcSendSources(0);

				 pulse(pulseTime,presModeClearPulse);
				 call funcUpdatePresentationSource(0);
                 call funcUpdatePresentationTabs(0);
				}
		}
}



/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH powerOn_press
{
    call funcpowerOn();
}

PUSH powerOff_press
{
    call funcpowerOff();
    call funcDisplayPowerOff();

}
  

push atcMode_Press
{

	whichMode = atcMode;
	call funcModeUpdate(whichMode);
}

push vtcMode_Press
{

	whichMode = vtcMode;
	if(displayPower = 0)
		{
	    call funcDisplayPowerOn();
		pulse(pulseTime,displayWaitPulse);
		waitForDisplay = 1;  // flag used when display wakes up
        displayWait_fb = 1;  // for wait popup                                                 
		}
	else
		call funcModeUpdate(whichMode);
}

push vtcSendSourcePresses
{
   integer i;
   i = GetLastModifiedArrayIndex ();
   call funcUpdateVtcSendSources(i);
}

push vtc_stop_pres_press
{

   call funcUpdateVtcSendSources(clear);

}


push presentationClearPress
{
     whichSource = 0;
     call funcUpdatePresentationSource(clear);
     call funcUpdatePresentationTabs(0); // clear tabs

}


push presentationMode_Press
{
    whichMode = presentationMode;
	call funcModeUpdate(whichMode);
			
}



push presentationPresses
{

	whichSource = GetLastModifiedArrayIndex ();
    info_string = "Mode = "+itoa(whichMode)+" , Source = "+itoa(whichSource);
    /*
	if(displayPower = 0)
		{
	    call funcDisplayPowerOn();
		pulse(pulseTime,displayWaitPulse);
		waitForDisplay = 1;
		displayWait_fb = 1;                                                       
		}
	else
		{*/
		call funcUpdatePresentationSource(whichSource);
		//}
			
}


push presentationTabPresses
{
    integer i;
    i = GetLastModifiedArrayIndex ();
    call funcUpdatePresentationTabs(i);
}
   


push vtcTabPresses
{
    integer i;
    i = GetLastModifiedArrayIndex ();
    call funcUpdateVtcTabs(i);
}

push atcTabPresses
{
    integer i;
    i = GetLastModifiedArrayIndex ();
    call funcUpdateAtcTabs(i);
}


push displayFbFromDevice
	{
     displayWait_fb = 0;  
     pulse(pulseTime,displayReadyPulse);
     if(waitForDisplay)
			{
            if(whichMode = vtcMode)
				call funcModeUpdate(whichMode);
            if(whichMode=presentationMode)	
				call funcUpdatePresentationSource(whichSource);
			waitForDisplay = 0;
            }

	}

 

push displayInpCmds
{
	integer i;
	i = GetLastModifiedArrayIndex ();
    if (i <> displayInP_fb)
		pulse(pulseTime,displayInpPulse);

}











/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE displayFbFromDevice
{
    display_fb = displayFbFromDevice;
    displayPower = displayFbFromDevice;

}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
 
Function Main()
{
 	powerOn_fb = 0;
	powerOff_fb = 1;
}



